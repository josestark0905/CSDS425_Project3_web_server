1. ALL the three options -n, -d, -a can appear in any order. However, they must be used and a corresponding argument must follow each option. For example, "./proj3 -n port -d document_directory -a auth_token" and "./proj3 -n port -a auth_token -d document_directory" are both valid, but "./proj3 -n port -a -d auth_token document_directory" is invalid.

2. Since the UNIX cannot bind to the same port again as soon as it is released, changing a new port for a new instance of proj3 is necessary when it is frequently run and shutdown. If running and closing too frequently with the same port, it may leads to "cannot bind to port" error.

3. The argument of -d should not end with "/", or it will duplicate with the argument of GET and the file will never be found

4. When the argument of GET is the name of an existed directory, the server will also return 200 response but with no more content.

5. Since the client will not close the socket after sending request, recv function will never return a 0 for blocking socket, it will wait for new data instead. So it's quite difficult to decide whether the request ended or not. It was mentioned that "\r\n" always appears as a blank line at the end of request, which means the last line before the blank line should have at least one linefeed. Therefore, I judged whether all the request data are received by detecting "\n\r\n" in the received data. If "\n\r\n" is found in the received request, the server will stop receiving more data. For example, request like "GET / HTTP/1.1\n\r\nsome other lines\r\n\r\n" is NOT a valid request, the server will stop receiving request at "\n\r\n" part.
However, some systems have a different linefeed. For example, UNIX take "\n" as linefeed, but Older Mac systems use "\r" as linefeed. This means some special conditions like "some lines\r\r\n" may also appear(although test cases of proj3 may not contain). To make my work more flexible, I added a timeout of 0.5 seconds to the receive part of the socket, so that request without an end of "\n\r\n" will also be processed and return a 400 response. Thus, the request needs to be sent to server without a pause longer than 0.5 seconds, or the server may not gain the whole request.
